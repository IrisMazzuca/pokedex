{"version":3,"sources":["Components/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","useState","isError","setIsError","isLoading","setIsLoading","data","setData","idData","setIdData","query","setQuery","useEffect","axios","get","then","response","console","log","id","catch","className","onChange","e","target","value","type","placeholder","aria-label","aria-describedby","role","color","height","width","src","sprites","front_default","alt","name","types","map","info","key","slot","abilities","index","ability","title","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sSAwIeA,EAjIF,WAAO,IAAD,EACeC,oBAAS,GADxB,mBACRC,EADQ,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAERG,EAFQ,KAEGC,EAFH,OAISJ,mBAAS,MAJlB,mBAIRK,EAJQ,KAIFC,EAJE,OAKaN,mBAAS,GALtB,mBAKRO,EALQ,KAKAC,EALA,OAMWR,mBAAS,IANpB,mBAMRS,EANQ,KAMDC,EANC,KAWfC,qBAAU,WAENP,GAAa,GACbF,GAAW,GAEXU,IAEKC,IAFL,4CAE8CJ,GAAgBF,IAEzDO,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAASV,MACrBC,EAAQS,EAASV,MACjBG,EAAUO,EAASV,KAAKa,IACxBd,GAAa,MAGhBe,OAAM,WACHf,GAAa,GACbF,GAAW,QAEpB,CAACK,EAAQE,IAgBZ,OACI,yBAAKW,UAAU,gEAEX,yBAAKA,UAAU,+BACX,2BACIC,SAAU,SAACC,GAAD,OAAOZ,EAA4B,MAAnBY,EAAEC,OAAOC,MAAgB,EAAIF,EAAEC,OAAOC,QAChEC,KAAK,OACLL,UAAU,eACVM,YAAY,YACZC,aAAW,sBACXC,mBAAiB,mBAGxB3B,GACG,yBAAKmB,UAAU,qBAAqBS,KAAK,SAAzC,mDAKH1B,GACG,kBAAC,IAAD,CAAQsB,KAAK,YAAYK,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAG/D3B,IAASF,IAAcF,GACpB,6BAEI,yBAAKmB,UAAU,gDACX,6BACI,yBAAKA,UAAU,WACX,yBAAKa,IAAK5B,EAAK6B,QAAQC,cAAef,UAAU,QAAQgB,IAAI,iBAEhE,yBAAKhB,UAAU,uDACX,wBAAIA,UAAU,cAAcf,EAAKgC,MACjC,yBAAKjB,UAAU,oBACX,uBAAGA,UAAU,qBAAb,UAGIf,EAAKiC,MAAMC,KAAI,SAAAC,GACX,OAAO,0BAAMC,IAAG,cAASD,EAAKE,OAAvB,IAAiC,kBAAC,IAAD,MAAjC,IAAkDF,EAAKf,KAAKY,SAI3E,uBAAGjB,UAAU,qBAAb,cAGIf,EAAKsC,UAAUJ,KAAI,SAACC,EAAMI,GACtB,OAAO,0BAAMH,IAAG,cAASG,IAAlB,IAA6B,kBAAC,IAAD,MAA7B,IAA8CJ,EAAKK,QAAQR,WAKlF,yBAAKjB,UAAU,YAAYS,KAAK,QAAQF,aAAW,iBAC/C,4BACImB,MAAM,WACNrB,KAAK,SACLL,UAAU,gBACV2B,QA/DN,WACtBrC,EAAS,IAEHF,EADM,IAAXD,EAlCkB,IAoCHA,EAAS,KA6DG,kBAAC,IAAD,OAEJ,4BACIuC,MAAM,OACNrB,KAAK,SACLL,UAAU,WACV2B,QA9EV,WAClBrC,EAAS,IAEHF,EA5Ba,MA2BlBD,EACe,EACAA,EAAS,KA4EG,kBAAC,IAAD,aCvGrByC,EAbH,WAEV,OACE,yBAAK5B,UAAU,OACb,wBAAIA,UAAU,SAAd,cAIA,kBAAC,EAAD,QCAc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.a214c7da.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport Loader from \"react-loader-spinner\"\r\nimport axios from 'axios';\r\nimport { GrNext, GrPrevious } from 'react-icons/gr'\r\nimport { FcCheckmark } from 'react-icons/fc'\r\n\r\nconst Card = () => {\r\n    const [isError, setIsError] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [data, setData] = useState(null);\r\n    const [idData, setIdData] = useState(1);\r\n    const [query, setQuery] = useState(\"\")\r\n\r\n    const characterLimit = 600;\r\n\r\n    // the request to the api can be by the pokemon id (idData) or by its name (query).\r\n    useEffect(() => {\r\n\r\n        setIsLoading(true);\r\n        setIsError(false);\r\n\r\n        axios\r\n\r\n            .get(`https://pokeapi.co/api/v2/pokemon/${query ? query : idData}`)\r\n\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                setData(response.data);\r\n                setIdData(response.data.id)\r\n                setIsLoading(false);\r\n            })\r\n\r\n            .catch(() => {\r\n                setIsLoading(false);\r\n                setIsError(true);\r\n            });\r\n    }, [idData, query]);\r\n\r\n    const nextCharacter = () => {\r\n        setQuery(\"\");\r\n        (idData === characterLimit)\r\n            ? setIdData(1)\r\n            : setIdData(idData + 1);\r\n    };\r\n\r\n    const previousCharacter = () => {\r\n        setQuery(\"\");\r\n        (idData === 1)\r\n            ? setIdData(characterLimit)\r\n            : setIdData(idData - 1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column justify-content-center align-items-center\">\r\n\r\n            <div className=\"input-normal my-3 mx-5 w-30\">\r\n                <input\r\n                    onChange={(e) => setQuery(e.target.value === \" \" ? 1 : e.target.value)}\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Buscador \"\r\n                    aria-label=\"Buscador por nombre\"\r\n                    aria-describedby=\"button-addon2\" />\r\n            </div>\r\n\r\n            {isError && (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Escriba un nombre o id de Pókemon válido!\r\n                </div>\r\n            )}\r\n\r\n            {isLoading && (\r\n                <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\r\n            )}\r\n\r\n            {data && !isLoading && !isError && (\r\n                <div>\r\n\r\n                    <div className=\"container my-2 d-flex justify-content-center\" >\r\n                        <div >\r\n                            <div className=\"display\">\r\n                                <img src={data.sprites.front_default} className=\"image\" alt=\"pokemon-img\" />\r\n                            </div>\r\n                            <div className=\"card-body d-flex flex-column justify-content-center\">\r\n                                <h5 className=\"card-title\">{data.name}</h5>\r\n                                <div className=\"card-description\">\r\n                                    <p className=\"title-description\">Types:</p>\r\n\r\n                                    {\r\n                                        data.types.map(info => {\r\n                                            return <span key={`key_${info.slot}`} > <FcCheckmark /> {info.type.name}</span>\r\n                                        })\r\n                                    }\r\n\r\n                                    <p className=\"title-description\">Abilities:</p>\r\n\r\n                                    {\r\n                                        data.abilities.map((info, index) => {\r\n                                            return <span key={`key_${index}`} > <FcCheckmark /> {info.ability.name}</span>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n                                <button\r\n                                    title=\"Previous\"\r\n                                    type=\"button\"\r\n                                    className=\"btn-grey mx-1\"\r\n                                    onClick={previousCharacter}\r\n                                >\r\n                                    <GrPrevious />\r\n                                </button>\r\n                                <button\r\n                                    title=\"Next\"\r\n                                    type=\"button\"\r\n                                    className=\"btn-grey\"\r\n                                    onClick={nextCharacter}\r\n                                >\r\n                                    <GrNext />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Card","import React from 'react';\nimport './App.css';\nimport Card from './Components/Card'\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <h1 className='title'>\n        Pokédex\n      </h1>\n\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}